// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.2
// source: service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x12, 0x67, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xce, 0x02, 0x0a, 0x15, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x16, 0x6c, 0x69,
	0x73, 0x74, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70,
	0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47,
	0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47,
	0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x00, 0x32, 0xf6, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x5c, 0x0a, 0x1a, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_service_proto_goTypes = []interface{}{
	(*GpuInstanceInfo)(nil),             // 0: protos.GpuInstanceInfo
	(*ComputeInstanceInfo)(nil),         // 1: protos.ComputeInstanceInfo
	(*GpuInstanceProfileInfos)(nil),     // 2: protos.GpuInstanceProfileInfos
	(*emptypb.Empty)(nil),               // 3: google.protobuf.Empty
	(*GpuInstanceInfos)(nil),            // 4: protos.GpuInstanceInfos
	(*ComputeInstanceProfileInfos)(nil), // 5: protos.ComputeInstanceProfileInfos
	(*ComputeInstanceInfos)(nil),        // 6: protos.ComputeInstanceInfos
}
var file_service_proto_depIdxs = []int32{
	0, // 0: protos.GpuInstanceController.listGpuInstanceProfile:input_type -> protos.GpuInstanceInfo
	0, // 1: protos.GpuInstanceController.CreateGpuInstance:input_type -> protos.GpuInstanceInfo
	0, // 2: protos.GpuInstanceController.DeleteGpuInstance:input_type -> protos.GpuInstanceInfo
	0, // 3: protos.GpuInstanceController.ListGpuInstanceByProfile:input_type -> protos.GpuInstanceInfo
	0, // 4: protos.ComputeInstanceController.listComputeInstanceProfile:input_type -> protos.GpuInstanceInfo
	1, // 5: protos.ComputeInstanceController.CreateComputeInstance:input_type -> protos.ComputeInstanceInfo
	1, // 6: protos.ComputeInstanceController.DeleteComputeInstance:input_type -> protos.ComputeInstanceInfo
	1, // 7: protos.ComputeInstanceController.ListComputeInstanceByProfile:input_type -> protos.ComputeInstanceInfo
	2, // 8: protos.GpuInstanceController.listGpuInstanceProfile:output_type -> protos.GpuInstanceProfileInfos
	3, // 9: protos.GpuInstanceController.CreateGpuInstance:output_type -> google.protobuf.Empty
	3, // 10: protos.GpuInstanceController.DeleteGpuInstance:output_type -> google.protobuf.Empty
	4, // 11: protos.GpuInstanceController.ListGpuInstanceByProfile:output_type -> protos.GpuInstanceInfos
	5, // 12: protos.ComputeInstanceController.listComputeInstanceProfile:output_type -> protos.ComputeInstanceProfileInfos
	3, // 13: protos.ComputeInstanceController.CreateComputeInstance:output_type -> google.protobuf.Empty
	3, // 14: protos.ComputeInstanceController.DeleteComputeInstance:output_type -> google.protobuf.Empty
	6, // 15: protos.ComputeInstanceController.ListComputeInstanceByProfile:output_type -> protos.ComputeInstanceInfos
	8, // [8:16] is the sub-list for method output_type
	0, // [0:8] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_gpu_instance_proto_init()
	file_compute_instance_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GpuInstanceControllerClient is the client API for GpuInstanceController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GpuInstanceControllerClient interface {
	ListGpuInstanceProfile(ctx context.Context, in *GpuInstanceInfo, opts ...grpc.CallOption) (*GpuInstanceProfileInfos, error)
	CreateGpuInstance(ctx context.Context, in *GpuInstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteGpuInstance(ctx context.Context, in *GpuInstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListGpuInstanceByProfile(ctx context.Context, in *GpuInstanceInfo, opts ...grpc.CallOption) (*GpuInstanceInfos, error)
}

type gpuInstanceControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGpuInstanceControllerClient(cc grpc.ClientConnInterface) GpuInstanceControllerClient {
	return &gpuInstanceControllerClient{cc}
}

func (c *gpuInstanceControllerClient) ListGpuInstanceProfile(ctx context.Context, in *GpuInstanceInfo, opts ...grpc.CallOption) (*GpuInstanceProfileInfos, error) {
	out := new(GpuInstanceProfileInfos)
	err := c.cc.Invoke(ctx, "/protos.GpuInstanceController/listGpuInstanceProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuInstanceControllerClient) CreateGpuInstance(ctx context.Context, in *GpuInstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.GpuInstanceController/CreateGpuInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuInstanceControllerClient) DeleteGpuInstance(ctx context.Context, in *GpuInstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.GpuInstanceController/DeleteGpuInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuInstanceControllerClient) ListGpuInstanceByProfile(ctx context.Context, in *GpuInstanceInfo, opts ...grpc.CallOption) (*GpuInstanceInfos, error) {
	out := new(GpuInstanceInfos)
	err := c.cc.Invoke(ctx, "/protos.GpuInstanceController/ListGpuInstanceByProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GpuInstanceControllerServer is the server API for GpuInstanceController service.
type GpuInstanceControllerServer interface {
	ListGpuInstanceProfile(context.Context, *GpuInstanceInfo) (*GpuInstanceProfileInfos, error)
	CreateGpuInstance(context.Context, *GpuInstanceInfo) (*emptypb.Empty, error)
	DeleteGpuInstance(context.Context, *GpuInstanceInfo) (*emptypb.Empty, error)
	ListGpuInstanceByProfile(context.Context, *GpuInstanceInfo) (*GpuInstanceInfos, error)
}

// UnimplementedGpuInstanceControllerServer can be embedded to have forward compatible implementations.
type UnimplementedGpuInstanceControllerServer struct {
}

func (*UnimplementedGpuInstanceControllerServer) ListGpuInstanceProfile(context.Context, *GpuInstanceInfo) (*GpuInstanceProfileInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGpuInstanceProfile not implemented")
}
func (*UnimplementedGpuInstanceControllerServer) CreateGpuInstance(context.Context, *GpuInstanceInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGpuInstance not implemented")
}
func (*UnimplementedGpuInstanceControllerServer) DeleteGpuInstance(context.Context, *GpuInstanceInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGpuInstance not implemented")
}
func (*UnimplementedGpuInstanceControllerServer) ListGpuInstanceByProfile(context.Context, *GpuInstanceInfo) (*GpuInstanceInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGpuInstanceByProfile not implemented")
}

func RegisterGpuInstanceControllerServer(s *grpc.Server, srv GpuInstanceControllerServer) {
	s.RegisterService(&_GpuInstanceController_serviceDesc, srv)
}

func _GpuInstanceController_ListGpuInstanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuInstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuInstanceControllerServer).ListGpuInstanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GpuInstanceController/ListGpuInstanceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuInstanceControllerServer).ListGpuInstanceProfile(ctx, req.(*GpuInstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuInstanceController_CreateGpuInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuInstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuInstanceControllerServer).CreateGpuInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GpuInstanceController/CreateGpuInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuInstanceControllerServer).CreateGpuInstance(ctx, req.(*GpuInstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuInstanceController_DeleteGpuInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuInstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuInstanceControllerServer).DeleteGpuInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GpuInstanceController/DeleteGpuInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuInstanceControllerServer).DeleteGpuInstance(ctx, req.(*GpuInstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuInstanceController_ListGpuInstanceByProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuInstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuInstanceControllerServer).ListGpuInstanceByProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GpuInstanceController/ListGpuInstanceByProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuInstanceControllerServer).ListGpuInstanceByProfile(ctx, req.(*GpuInstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _GpuInstanceController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GpuInstanceController",
	HandlerType: (*GpuInstanceControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listGpuInstanceProfile",
			Handler:    _GpuInstanceController_ListGpuInstanceProfile_Handler,
		},
		{
			MethodName: "CreateGpuInstance",
			Handler:    _GpuInstanceController_CreateGpuInstance_Handler,
		},
		{
			MethodName: "DeleteGpuInstance",
			Handler:    _GpuInstanceController_DeleteGpuInstance_Handler,
		},
		{
			MethodName: "ListGpuInstanceByProfile",
			Handler:    _GpuInstanceController_ListGpuInstanceByProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ComputeInstanceControllerClient is the client API for ComputeInstanceController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComputeInstanceControllerClient interface {
	ListComputeInstanceProfile(ctx context.Context, in *GpuInstanceInfo, opts ...grpc.CallOption) (*ComputeInstanceProfileInfos, error)
	CreateComputeInstance(ctx context.Context, in *ComputeInstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteComputeInstance(ctx context.Context, in *ComputeInstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListComputeInstanceByProfile(ctx context.Context, in *ComputeInstanceInfo, opts ...grpc.CallOption) (*ComputeInstanceInfos, error)
}

type computeInstanceControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeInstanceControllerClient(cc grpc.ClientConnInterface) ComputeInstanceControllerClient {
	return &computeInstanceControllerClient{cc}
}

func (c *computeInstanceControllerClient) ListComputeInstanceProfile(ctx context.Context, in *GpuInstanceInfo, opts ...grpc.CallOption) (*ComputeInstanceProfileInfos, error) {
	out := new(ComputeInstanceProfileInfos)
	err := c.cc.Invoke(ctx, "/protos.ComputeInstanceController/listComputeInstanceProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeInstanceControllerClient) CreateComputeInstance(ctx context.Context, in *ComputeInstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.ComputeInstanceController/CreateComputeInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeInstanceControllerClient) DeleteComputeInstance(ctx context.Context, in *ComputeInstanceInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.ComputeInstanceController/DeleteComputeInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeInstanceControllerClient) ListComputeInstanceByProfile(ctx context.Context, in *ComputeInstanceInfo, opts ...grpc.CallOption) (*ComputeInstanceInfos, error) {
	out := new(ComputeInstanceInfos)
	err := c.cc.Invoke(ctx, "/protos.ComputeInstanceController/ListComputeInstanceByProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeInstanceControllerServer is the server API for ComputeInstanceController service.
type ComputeInstanceControllerServer interface {
	ListComputeInstanceProfile(context.Context, *GpuInstanceInfo) (*ComputeInstanceProfileInfos, error)
	CreateComputeInstance(context.Context, *ComputeInstanceInfo) (*emptypb.Empty, error)
	DeleteComputeInstance(context.Context, *ComputeInstanceInfo) (*emptypb.Empty, error)
	ListComputeInstanceByProfile(context.Context, *ComputeInstanceInfo) (*ComputeInstanceInfos, error)
}

// UnimplementedComputeInstanceControllerServer can be embedded to have forward compatible implementations.
type UnimplementedComputeInstanceControllerServer struct {
}

func (*UnimplementedComputeInstanceControllerServer) ListComputeInstanceProfile(context.Context, *GpuInstanceInfo) (*ComputeInstanceProfileInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComputeInstanceProfile not implemented")
}
func (*UnimplementedComputeInstanceControllerServer) CreateComputeInstance(context.Context, *ComputeInstanceInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComputeInstance not implemented")
}
func (*UnimplementedComputeInstanceControllerServer) DeleteComputeInstance(context.Context, *ComputeInstanceInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComputeInstance not implemented")
}
func (*UnimplementedComputeInstanceControllerServer) ListComputeInstanceByProfile(context.Context, *ComputeInstanceInfo) (*ComputeInstanceInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComputeInstanceByProfile not implemented")
}

func RegisterComputeInstanceControllerServer(s *grpc.Server, srv ComputeInstanceControllerServer) {
	s.RegisterService(&_ComputeInstanceController_serviceDesc, srv)
}

func _ComputeInstanceController_ListComputeInstanceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuInstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeInstanceControllerServer).ListComputeInstanceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ComputeInstanceController/ListComputeInstanceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeInstanceControllerServer).ListComputeInstanceProfile(ctx, req.(*GpuInstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeInstanceController_CreateComputeInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeInstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeInstanceControllerServer).CreateComputeInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ComputeInstanceController/CreateComputeInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeInstanceControllerServer).CreateComputeInstance(ctx, req.(*ComputeInstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeInstanceController_DeleteComputeInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeInstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeInstanceControllerServer).DeleteComputeInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ComputeInstanceController/DeleteComputeInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeInstanceControllerServer).DeleteComputeInstance(ctx, req.(*ComputeInstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeInstanceController_ListComputeInstanceByProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeInstanceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeInstanceControllerServer).ListComputeInstanceByProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ComputeInstanceController/ListComputeInstanceByProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeInstanceControllerServer).ListComputeInstanceByProfile(ctx, req.(*ComputeInstanceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComputeInstanceController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ComputeInstanceController",
	HandlerType: (*ComputeInstanceControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listComputeInstanceProfile",
			Handler:    _ComputeInstanceController_ListComputeInstanceProfile_Handler,
		},
		{
			MethodName: "CreateComputeInstance",
			Handler:    _ComputeInstanceController_CreateComputeInstance_Handler,
		},
		{
			MethodName: "DeleteComputeInstance",
			Handler:    _ComputeInstanceController_DeleteComputeInstance_Handler,
		},
		{
			MethodName: "ListComputeInstanceByProfile",
			Handler:    _ComputeInstanceController_ListComputeInstanceByProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
